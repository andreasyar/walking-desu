ArrayList<Unit> units;

for(ListIterator<Unit> li = units.getListIterator(); li.hasNext; ) {
    Unit u = li.next();
    Sprite s = u.getSprite();
    drawImage(s.image, s.x + mapOffset.x, s.y + mapOffset.y);
}

class Sprite {
    public BufferedImage image;
    public int x;
    public int y;
}

abstract class Unit {
    abstract public Sprite getSprite();
}

class Player extends Unit {
    MovementAnimation movement;
    StandAnimation stand;
    String spriteSet = "desu";

    public Sprite getSprite() {
        return isMove() ? movement.getSprite() : stand.getSprite();
    }
}

enum Direction {
    NORTH,
    NORTH_WEST,
    NORTH_EAST,
    SOUTH,
    SOUTH_WEST,
    SOUTH_EAST;

    public Direction getDirection(Point beg, Point end) {
        int diffX = end.x - beg.x;
        int diffY = end.y - beg.y;

        if (diffX > 0 && diffY <= 0 && diffX > -diffY) {
            return NORTH_EAST;
        } else if (diffX > 0 && diffY < 0 && diffX <= -diffY) {
            return NORTH;
        } else if (diffX <= 0 && diffY < 0 && diffX > diffY) {
            return NORTH;
        } else if (diffX < 0 && diffY < 0 && diffX <= diffY) {
            return NORTH_WEST;
        } else if (diffX < 0 && diffY >= 0 && -diffX > diffY) {
            return SOUTH_WEST;
        } else if (diffX < 0 && diffY > 0 && -diffX <= diffY) {
            return SOUTH;
        } else if (diffX >= 0 && diffY > 0 && diffX < diffY) {
            return SOUTH;
        } else if (diffX > 0 && diffY > 0 && diffX >= diffY) {
            return SOUTH_EAST;
        } else if (diffX == 0 && diffY == 0) {
            return SOUTH; // TODO wtf?
        } else {
            return null;
        }
    }
}

class MovementAnimation {
    private Point beg;
    private Point end;
    private double step;
    private DirectionalSpriteSet set;
    private Direction direct;

    public MovementAnimation(String spriteSet) {
        this.set = DirectionalSpriteSet.load(spriteSet + "_walk");
    }

    public final Sprite getSprite() {
        Sprite tmp = set.getSprite(Direction.NORTH, 0);
        tmp.x = 0;
        tmp.y = 0;
        return tmp;
    }

    public void move(Point beg, Point end, double step) {
        direct = MovementAnimation.getDirection(beg, end);
        this.beg = beg;
        this.end = end;
        this.step = step;
    }
}

class StandAnimation {
    private DirectionalSpriteSet set;

    public StandAnimation(DirectionalSpriteSet set) {}

    public final Sprite getSprite() {
        Sprite tmp = set.getSprite(Direction.NORTH, 0);
        tmp.x = 0;
        tmp.y = 0;
        return tmp;
    }
}

class DirectionalSpriteSet {
    private static HashMap<String, DirectionalSpriteSet> cache = new HashMap<String, DirectionalSpriteSet>();
    private HashMap<Direction, ArrayList<BufferedImage>> sprites = new HashMap<Direction, ArrayList<BufferedImage>>();
    private Sprite curSpr = new Sprite();

    public static DirectionalSpriteSet load(String name) {
        if (cache.containsKey(name)) {
            return (DirectionalSpriteSet) cache.get(name);
        } else {
            DirectionalSpriteSet set = new DirectionalSpriteSet(name);
            cache.put(name, set);
            return set;
        }
    }

    private DirectionalSpriteSet(String name) {
        for (Direction d:Direction.values()) {
            sprites.put(d, new ArrayList<BufferedImage>());
        }

        loadSprFiles(new String[] {"img/" + name + "/north_01.png", "img/" + name + "/north_02.png", });
        loadSprFiles(new String[] {"img/" + name + "/north_east_01.png", "img/" + name + "/north_east_02.png", });
        loadSprFiles(new String[] {"img/" + name + "/north_west_01.png", "img/" + name + "/north_west_02.png", });
        loadSprFiles(new String[] {"img/" + name + "/south_04.png", "img/" + name + "/south_05.png", });
        loadSprFiles(new String[] {"img/" + name + "/south_east_01.png", "img/" + name + "/south_east_02.png", });
        loadSprFiles(new String[] {"img/" + name + "/south_west_01.png", "img/" + name + "/south_west_02.png", });
    }

    public Sprite getSprite(Direction d, int index) {
        curSpr.image = sprites.get(d).get(index);
        return curSpr;
    }

    private void loadSprFiles(String[] paths) {
        ClassLoader cl = this.getClass().getClassLoader();
        URL url = null;

        for (int i = 0; i < paths.length; i++) {
            try {
                url = cl.getResource(paths[i]);
                if (url != null) {
                    sprites.get(Direction.NORTH).add(ImageIO.read(url));
                } else {
                    sprites.get(Direction.NORTH).add(ImageIO.read(new File(paths[i])));
                }
            } catch (IOException e) {
                e.printStackTrace();
                System.exit(1);
            }
        }
    }
}